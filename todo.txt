remaining
==========
-introduce enough timeout gaps to remove flakiness of QuasiHttpIntegrationTestOne
-test response streaming and buffering limit in DefaultSendProtocolInternal
-BypassSendProtocolInternal
-ApplicationReceiveProtocolInternal
-DefaultQuasiHttpClient
-DefaultQuasiHttpServer
*can skip above if library works with all examples

Release
-------
copyright
author
readme
xml documentation
release config
https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package#the-role-and-structure-of-the-nuspec-file

other default transports - keep in examples, later migrate to Kabomu.StandardAddons
------------------
LocalhostTcpTransport - making it async may require use of third party library. 
-consider connect/read timeout usage - https://www.baeldung.com/java-socket-connection-read-timeout
UnixSocketDomainTransport - availability and making it async may require use of third party library
WindowsNamedPipeTransport - availability and making it async may require use of third party library
HttpTransport
UdpTransport

default application pipeline - v1.1.0
----------------------------
- switch role model from ExpressJS to Ratpack (https://ratpack.io/manual/current/handlers.html)
- create Kabomu.WebFramework namespace
- IRegistry - tryGet/get(string or Type) -> object, getAll(string or Type) -> IEnumerable, join(IRegistry child), static mutableRegistry()
- IMutableRegistry extends IRegistry and IRegistryBuilder - tryRemove(string or Type) -> bool
- IRegistryBuilder - put(string or Type, object), putlazy(string or Type, Func<object>), build() -> IRegistry
- IQuasiHttpHandler
- IQuasiHttpContext inherits IRegistry
- Supplies next(registry) and insert(registry, handlers)
- Also supplies request getter/setter, response getter/setter as any object, commitresponse(response of exact type resembling use of send() methods in Ratpack)
- request should be a mutable registry, so as to have a global read/write context, as opposed to a local readonly context.
- Implement features as typed interfaces to retrieve from context, such as error handling, mime types, fetching files relative to document root (file system binding), parsing of urls (path binding, generation of urls (PublicAddress and Redirector), setting up TLS, etc.
- Entry point (RatpackServerSpec) - initial registry, root handler, server bootstrap config - can act as immutable portion of request context/environment

create default middleware - create in examples after v1.1.0, later migrate to StandardAddons
------------------
-path
-method+path
-json
-csv
-string
-byte buffer

-URL Path validation middleware (based on https://datatracker.ietf.org/doc/html/rfc1630). 
    1. Valid path characters aside forward slash and percent encoding %xx (ISO-8859-1): A–Z a–z 0–9 . - _ ~ ! $ & ' ( ) * + , ; = : @

-Header validation middleware
    1. key or value cannot contain newlines
    2. case sensitive keys only
    3. keys starts with English alphabet, and can contain other English alphabets, hyphens or decimal digits.
    4. values: only printable ASCII.
    3. the following headers are reserved for use by HTTP protocol, and hence will be ignored or lead to errors if set by clients for transmission over HTTP: content-length, transfer-encoding (fixed to "chunked"), trailer, te, upgrade, connection, keep-alive, proxy-authenticate, proxy-authorization, accept-encoding (fixed to "identity"), content-encoding.
    4. See also https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3


Optimize - reduce zero byte copy - v1.2.0?
-----------------------------------------
Created ExtendedTransport interface
-Add canTransferBody(body)->bool and transferBody - to support any  future sendfile/transmitfile
Create ExtendedBody interface
-Add canreadslices and readslices - takes a maxchunksize param, and returns slices.
  - of interest to extended transport and chunk encoding body.
-Have to still support readbytes and give ExtendedTransport the option to choose.
