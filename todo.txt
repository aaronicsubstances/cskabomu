remaining
==========
-MemoryBasedClientTransport
-MemoryBasedServerTransport
-DefaultQuasiHttpClient
-DefaultQuasiHttpServer

default transports - keep in examples, later migrate to Kabomu.StandardAddons
------------------
MemoryBasedTransport
LocalhostTcpTransport - making it async may require use of third party library. 
-consider connect/read timeout usage - https://www.baeldung.com/java-socket-connection-read-timeout
UnixSocketDomainTransport - availability and making it async may require use of third party library
WindowsNamedPipeTransport - availability and making it async may require use of third party library

default application pipeline - add to version 1.1
----------------------------
- switch role model from ExpressJS to Ratpack (https://ratpack.io/manual/current/handlers.html)
- create Kabomu.WebFramework namespace
- IRegistry - tryGet/get(string or Type) -> object, getAll(string or Type) -> IEnumerable, join(IRegistry child), static mutableRegistry()
- IMutableRegistry extends IRegistry and IRegistryBuilder - tryRemove(string or Type) -> bool
- IRegistryBuilder - put(string or Type, object), putlazy(string or Type, Func<object>), build() -> IRegistry
- IQuasiHttpHandler
- IQuasiHttpContext inherits IRegistry
- Supplies next(registry) and insert(registry, handlers)
- Also supplies request getter/setter, response getter/setter as any object, commitresponse(response of exact type resembling use of send() methods in Ratpack)
- request should be a mutable registry, so as to have a global read/write context, as opposed to a local readonly context.
- Implement features as typed interfaces to retrieve from context, such as error handling, mime types, fetching files relative to document root (file system binding), parsing of urls (path binding, generation of urls (PublicAddress and Redirector), setting up TLS, etc.
- Entry point (RatpackServerSpec) - initial registry, root handler, server bootstrap config - can act as immutable portion of request context/environment

create default middleware - create examples after version 1.1, later migrate to StandardAddons
------------------
-path
-method+path
-json
-csv
-string
-byte buffer

Optimize - reduce zero byte copy - v1.1.0
-----------------------------------------
Created ExtendedTransport interface
-Add canTransferBody(body)->bool and transferBody - to support any  future sendfile/transmitfile
Create ExtendedBody interface
-Add canreadslices and readslices - takes a maxchunksize param, and returns slices.
  - of interest to extended transport and chunk encoding body.
-Have to still support readbytes and give ExtendedTransport the option to choose.

*Often I end up with a slightly corrupted Test Explorer cache, such that I have tons of entries erroneously appearing under "<unknown project>" in the Test Explorer window. Fixing this requires manually deleting the testlogs at ".vs/<project name>/v16/TestStore/0/*.testlog". There should be a way to clear this cache from within Visual Studio.

Release
-------
copyright
author
readme
minimal newtsonsoft json reqiurement?
xml documentation
.net standard targets
debug or release
https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package#the-role-and-structure-of-the-nuspec-file