using System;
using System.Collections.Generic;
using System.Text;

namespace Kabomu.QuasiHttp.Transport
{
    /// <summary>
    /// Exception thrown when an imposed limit on data bufering is exceeded.
    /// </summary>
    public class DataBufferLimitExceededException : Exception
    {
        /// <summary>
        /// Creates new instance.
        /// </summary>
        /// <param name="bufferSizeLimit">the maximum size limit allowed for data buffering</param>
        public DataBufferLimitExceededException(int bufferSizeLimit) : this(bufferSizeLimit, null, null)
        {
        }

        /// <summary>
        /// Creates new instance with a given message and underlying cause of the exception.
        /// </summary>
        /// <param name="bufferSizeLimit">the maximum size limit allowed for data buffering</param>
        /// <param name="message">error message or null to create a default message based on buffer size limit</param>
        /// <param name="innerException">any underlying cause of this exception</param>
        public DataBufferLimitExceededException(int bufferSizeLimit, string message, Exception innerException) :
            base(message ?? CreateErrorMessage(bufferSizeLimit), innerException)
        {
            BufferSizeLimit = bufferSizeLimit;
        }

        /// <summary>
        /// Gets the data buffer size limit leading to this exception.
        /// </summary>
        public int BufferSizeLimit { get; }

        /// <summary>
        /// Creates default error message. This function is the one called when a null message argument is
        /// supplied to constructors of this class. It is exposed publicly for the purpose of prepending or appending to
        /// the message generated by this function.
        /// </summary>
        /// <param name="bufferSizeLimit">maximum data buffer size limit to include in error message</param>
        /// <returns>default error message describing buffer size limit.</returns>
        private static string CreateErrorMessage(int bufferSizeLimit)
        {
            return $"data buffer size limit of {bufferSizeLimit} bytes exceeded";
        }
    }
}
