using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace Kabomu.Concurrency
{
    /// <summary>
    /// Represents a callback execution API with a single level of parallelism which can be used to schedule
    /// timed executions, and which can also be leveraged for mutual exclusion.
    /// </summary>
    /// <remarks>
    /// Inspired by single-threaded architectures such as NodeJS.
    /// </remarks>
    public interface IEventLoopApi : ITimerApi, IMutexApi
    {
        /// <summary>
        /// Returns true if the current thread is an event loop thread, and false if otherwise. Useful for optimizing 
        /// mutual exclusion in implementations.
        /// </summary>
        /// <remarks>
        /// Implementations which use a dedicated thread or thread pool, should return true to prevent unnecessary posting
        /// of event to thread or thread pool. 
        /// <para></para>
        /// For implementations in which this property does not make sense, "false" can always be returned.
        /// </remarks>
        bool IsInterimEventLoopThread { get; }

        /// <summary>
        /// Schedules a callback to execute immediately on an event loop after those currently awaiting
        /// immediate execution.
        /// </summary>
        /// <remarks>
        /// Equivalent to setImmediate() function in NodeJS.
        /// </remarks>
        /// <param name="cb">callback to run</param>
        /// <returns>handle which can be used to cancel immediate execution request</returns>
        object SetImmediate(Action cb);

        /// <summary>
        /// Cancels the scheduling of a callback for immediate execution.
        /// </summary>
        /// <remarks>
        /// Equivalent to clearImmediate() in NodeJS.
        /// </remarks>
        /// <param name="immediateHandle">handle generated by a previous call to <see cref="SetImmediate(Action)"/></param>
        void ClearImmediate(object immediateHandle);
    }
}
