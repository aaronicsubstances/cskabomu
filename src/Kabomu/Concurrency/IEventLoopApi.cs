using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace Kabomu.Concurrency
{
    public interface IEventLoopApi
    {
        /// <summary>
        /// Equivalent to setImmediate() in NodeJS
        /// </summary>
        /// <param name="cb">callback to run</param>
        /// <returns>handles which can be used to either wait for immediate execution, or cancel immediate execution request</returns>
        Tuple<Task, object> SetImmediate(Func<Task> cb);

        /// <summary>
        /// Equivalent to clearImmediate() in NodeJs
        /// </summary>
        /// <param name="immediateHandle">handle generated by a previous call to SetImmediate()</param>
        void ClearImmediate(object immediateHandle);

        /// <summary>
        /// Equivalent to setTimeout() in NodeJS
        /// </summary>
        /// <param name="millis">timeout value in milliseconds</param>
        /// <param name="cb">callback to run on timeout.</param>
        /// <returns>handles which can be used to either wait for timeout request, or cancel timeout request</returns>
        Tuple<Task, object> SetTimeout(int millis, Func<Task> cb);

        /// <summary>
        /// Equivalent to clearTimeout() in NodeJs
        /// </summary>
        /// <param name="timeoutHandle">handle generated by a previous call to SetTimeout()</param>
        void ClearTimeout(object timeoutHandle);
    }
}
