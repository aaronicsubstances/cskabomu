using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace Kabomu.Concurrency
{
    /// <summary>
    /// Facility that can provide timer-related services.
    /// </summary>
    public interface ITimerApi
    {
        /// <summary>
        /// Schedules a callback for execution in the future.
        /// </summary>
        /// <remarks>
        /// Equivalent to setTimeout() in NodeJS.
        /// </remarks>
        /// <param name="cb">callback to run on timeout.</param>
        /// <param name="millis">delay in milliseconds from current time after which to run callback</param>
        /// <returns>handle which can be used to cancel timeout request</returns>
        object SetTimeout(Action cb, int millis);

        /// <summary>
        /// Cancels the scheduling of a callback for future execution.
        /// </summary>
        /// <remarks>
        /// Equivalent to clearTimeout() in NodeJS.
        /// </remarks>
        /// <param name="timeoutHandle">handle generated by a previous call to <see cref="SetTimeout(Action, int)"/></param>
        void ClearTimeout(object timeoutHandle);

        /// <summary>
        /// Waits asynchronously for some specified time period.
        /// </summary>
        /// <remarks>
        /// This method exists to provide more efficient means than <see cref="SetTimeout(Action, int)"/>,
        /// for waiting asynchronously if there is no cancellation involved.
        /// </remarks>
        /// <param name="millis">delay in millisecondss</param>
        /// <returns>task representing asynchronous operation.</returns>
        Task Delay(int millis);
    }
}
