using System;
using System.Collections.Generic;
using System.Text;

namespace Kabomu.Mediator.Path
{
    /// <summary>
    /// Path interpolation options for <see cref="IPathTemplate"/> instances created by
    /// <see cref="DefaultPathTemplateGenerator"/> instances.
    /// </summary>
    public class DefaultPathTemplateFormatOptions
    {
        /// <summary>
        /// Gets or sets a value indicating whether a leading slash must be present in interpolated paths,
        /// independent of the match options present in a path template generated by
        /// an instance of <see cref="DefaultPathTemplateGenerator"/> class.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item>A value of true means ensure leading slash.</item>
        /// <item>A value of false means omit leading slash.</item>
        /// <item>A value of null means to use whatever is dictated by the applicable match options; or to ensure a leading
        /// slash by default if no applicable match options are found.</item>
        /// </list>
        /// </remarks>
        public bool? ApplyLeadingSlash { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a trailing slash must be present in interpolated paths,
        /// independent of the match options present in a path template generated by
        /// an instance of <see cref="DefaultPathTemplateGenerator"/> class.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item>A value of true means ensure trailing slash.</item>
        /// <item>A value of false means omit trailing slash.</item>
        /// <item>A value of null means to use whatever is dictated by the applicable match options; or to omit a trailing
        /// slash by default if no applicable match options are found.</item>
        /// </list>
        /// </remarks>
        public bool? ApplyTrailingSlash { get; set; }

        /// <summary>
        /// Gets or sets a value indicating how a case sensitive comparisons should be done during interpolation.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item>A value of true means to employ case sensitive string comparisons</item>
        /// <item>A value of false means to ignore case during string comparisons</item>
        /// <item>A value of null means to use whatever is dictated by the applicable match options; or to ignore case
        /// by default if no applicable match options are found.</item>
        /// </list>
        /// </remarks>
        public bool? CaseSensitiveMatchEnabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not to escape the unsafe URL characters in
        /// non literal (but non wild card) segments during interpolation.
        /// Wild card segments are never escaped.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item>A value of true means to escape non literal (but non wild card) segments</item>
        /// <item>A value of false means to skip escaping of non literal (but non wild card) segments</item>
        /// <item>A value of null means to use whatever is dictated by the applicable match options; 
        /// or to escape unsafe URL characters by default if no applicable match options are found.</item>
        /// </list>
        /// </remarks>
        public bool? EscapeNonWildCardSegments { get; set; }
    }
}
